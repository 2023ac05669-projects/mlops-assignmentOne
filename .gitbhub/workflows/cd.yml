name: CD

on:
  push:
    branches: ["main"]   # ✅ deploy from your main branch
  release:
    types: [published]

env:
  REGISTRY: docker.io
  IMAGE_NAME: kushagralonaria2023ac05669/mlops-assignment  # ✅ your Docker Hub repo

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract metadata (tags, labels)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=latest
            type=sha,format=short

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          push: true
          context: .
          platforms: linux/amd64
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Write SSH key
        run: |
          echo "${{ secrets.EC2_SSH_KEY }}" > key.pem
          chmod 600 key.pem

      - name: Deploy to VM via SSH
        env:
          HOST: ${{ secrets.EC2_HOST }}
          USER: ${{ secrets.EC2_USER }}
        run: |
          scp -i key.pem -o StrictHostKeyChecking=no docker-compose.prod.yml ${USER}@${HOST}:~/docker-compose.prod.yml
          ssh -i key.pem -o StrictHostKeyChecking=no ${USER}@${HOST} '\
            mkdir -p ~/app && \
            if [ -n "${{ secrets.APP_ENV }}" ]; then echo "${{ secrets.APP_ENV }}" > ~/app/.env; fi && \
            docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" -p "${{ secrets.DOCKERHUB_TOKEN }}" && \
            docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest && \
            docker compose -f ~/docker-compose.prod.yml pull && \
            docker compose -f ~/docker-compose.prod.yml up -d --remove-orphans \
          '
